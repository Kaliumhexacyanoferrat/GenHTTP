using System;
using System.Collections.Generic;

using GenHTTP.Api.Protocol;

namespace GenHTTP.Modules.Reflection;

/// <summary>
/// A result of a service invocation that wraps a given payload and
/// still allows to modify the response generated by the server.
/// </summary>
/// <typeparam name="T">The type of payload wrapped by this result</typeparam>
/// <remarks>
/// Useful to change response properties (such as the status code or headers)
/// while still keeping the content in place. Note that returning a result
/// will not change the serialized outcome of the service method, it will be
/// the same as it would be when you would just return the payload itself.
/// </remarks>
public class Result<T> : IResultWrapper, IResponseModification<Result<T>>
{
    private FlexibleResponseStatus? _Status;

    private Dictionary<string, string>? _Headers;

    private DateTime? _Expires;

    private DateTime? _Modified;

    private List<Cookie>? _Cookies;

    private FlexibleContentType? _ContentType;

    private string? _Encoding;

    #region Get-/Setters

    /// <summary>
    /// The actual data to be returned to the client.
    /// </summary>
    public T? Payload { get; }

    object? IResultWrapper.Payload => Payload;

    #endregion

    #region Initialization

    /// <summary>
    /// Creates a new result with the given payload.
    /// </summary>
    /// <param name="payload">The payload to be returned to the client</param>
    public Result(T? payload)
    {
            Payload = payload;
        }

    #endregion

    #region Functionality

    /// <inheritdoc />
    public Result<T> Status(ResponseStatus status)
    {
            _Status = new(status);
            return this;
        }

    /// <inheritdoc />
    public Result<T> Status(int status, string reason)
    {
            _Status = new FlexibleResponseStatus(status, reason);
            return this;
        }

    /// <inheritdoc />
    public Result<T> Header(string key, string value)
    {
            if (_Headers == null)
            {
                _Headers = new();
            }

            _Headers[key] = value;

            return this;
        }

    /// <inheritdoc />
    public Result<T> Expires(DateTime expiryDate)
    {
            _Expires = expiryDate;
            return this;
        }

    /// <inheritdoc />
    public Result<T> Modified(DateTime modificationDate)
    {
            _Modified = modificationDate;
            return this;
        }

    /// <inheritdoc />
    public Result<T> Cookie(Cookie cookie)
    {
            if (_Cookies == null)
            {
                _Cookies = new();
            }

            _Cookies.Add(cookie);

            return this;
        }

    /// <inheritdoc />
    public Result<T> Type(FlexibleContentType contentType)
    {
            _ContentType = contentType;
            return this;
        }

    /// <inheritdoc />
    public Result<T> Encoding(string encoding)
    {
            _Encoding = encoding;
            return this;
        }

    void IResultWrapper.Apply(IResponseBuilder builder)
    {
            if (_Status != null)
            {
                var value = _Status.Value;

                builder.Status(value.RawStatus, value.Phrase);
            }

            if (_Headers != null)
            {
                foreach (var kv in _Headers)
                {
                    builder.Header(kv.Key, kv.Value);
                }
            }

            if (_Expires != null)
            {
                builder.Expires(_Expires.Value);
            }

            if (_Modified != null)
            {
                builder.Modified(_Modified.Value);
            }

            if (_Cookies != null)
            {
                foreach (var cookie in _Cookies)
                {
                    builder.Cookie(cookie);
                }
            }

            if (_ContentType is not null)
            {
                builder.Type(_ContentType);
            }

            if (_Encoding != null)
            {
                builder.Encoding(_Encoding);
            }
        }

    #endregion

}
